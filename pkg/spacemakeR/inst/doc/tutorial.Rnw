\documentclass[a4paper]{article}
\usepackage[round]{natbib}
\bibliographystyle{abbrvnat}
\usepackage{pdfcolmk}
\usepackage{fancyvrb}
\usepackage{color}
\usepackage{url}
\usepackage[utf8]{inputenc}
%\VignetteIndexEntry{Tutorial} 
\begin{document}
\definecolor{Soutput}{rgb}{0,0,0.56}
\definecolor{Sinput}{rgb}{0.56,0,0}
\DefineVerbatimEnvironment{Sinput}{Verbatim}
{formatcom={\color{Sinput}},fontsize=\footnotesize, baselinestretch=0.75}
\DefineVerbatimEnvironment{Soutput}{Verbatim}
{formatcom={\color{Soutput}},fontsize=\footnotesize, baselinestretch=0.75}

\title{Moran's eigenvectors of spatial weighting matrices in \includegraphics[width=1cm,keepaspectratio]{figs/Rlogo}}
\author{St√©phane Dray}
\maketitle
<<t1, fig = FALSE, echo = FALSE, results=verbatim, width=7,height=7>>=
options(prompt=" ", continue=" ", width = 70)
options(digits=4)
@

\SweaveOpts{prefix.string = figs/tutorial, fig = TRUE, eps = TRUE, width = 6, height = 6}
\begin{quote}
This appendix indicates how to manipulate spatial weighting matrices in R. It illustrates the approach developped in:
 Dray S., Legendre P. and Peres-Neto P. R. (accepted)
  Spatial modeling: a comprehensive framework for principal coordinate
  analysis of neighbor matrices (PCNM). \textit{Ecological Modelling}.
Commands are written in red and outputs are written in blue.
\end{quote} 
\tableofcontents
\section{Introduction}
R  is a statistical language which can be freely downloaded from internet (\url{http://www.r-project.org/}). The package \texttt{spdep} written by Roger Bivand is devoted to the creation and to the manipulation of spatial weighting matrices. You have to install it and to load it into your R session:
<<ni1, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
library(spdep)
#help(package="spdep")
@

\section{Spatial Neighborhood}
Spatial neighborhoods are managed in \texttt{spded} as objects of class \texttt{nb}. It corresponds to the notion of connectivity matrices discussed in the article. Various functions are devoted to create nb objects from geographic coordinates of sites. We present different alternatives according to the sampling plan.
\subsection{Grids}
If the sampling scheme is based on grid of 10 rows and 8 columns, you can easily generate the coordinates:

<<ni2, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
xygrid<-expand.grid(1:10,1:8)
plot(xygrid)
@ 
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni2}
\end{center}

Spatial neighborhoods are managed in \texttt{spded} as objects of class \texttt{nb}. For a grid, you can create this kind of object with the function \texttt{cell2nb}.
<<ni3, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
#?cell2nb
nb1<-cell2nb(10,8,type="queen")

plot(nb1,xygrid,col="green",pch=20,cex=2)
title(main="queen neighborhood",cex.main=2)

nb1
@ 
<<ni4, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nb2<-cell2nb(10,8,type="rook")

plot(nb2,xygrid,col="blue",pch=20,cex=2)
title(main="rook neighborhood",cex.main=2)

nb2
@ 

\begin{center}
\includegraphics[width=0.4\textwidth,keepaspectratio]{figs/tutorial-ni3}
\includegraphics[width=0.4\textwidth,keepaspectratio]{figs/tutorial-ni4}
\end{center}
\subsection{Transects}
The easiest way to deal with transects is to consider them as grids with only one row:
<<ni5, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
xytransect<-expand.grid(1:20,1)
nb3=cell2nb(20,1)

plot(nb3,xytransect,col="red",pch=20,cex=2)
title(main="transect of 20 sites")

summary(nb3)
@ 
\begin{center}
\includegraphics[width=0.6\textwidth,keepaspectratio]{figs/tutorial-ni5}
\end{center}
All sites have two neighbors except the first and the last one.
\subsection{Irregular samplings}
here are many ways to define neighborhood in the case of irregular samplings. We consider a sampling with 10 sites:
<<ni6, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
set.seed(3)
xyir<-matrix(runif(20),10,2)
plot(xyir,pch=20,cex=1.5,main="irregular sampling with 10 sites")
@ 
\begin{center}
\includegraphics[width=0.6\textwidth,keepaspectratio]{figs/tutorial-ni6}
\end{center}
<<ni7, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
#?dnearneigh
nbnear1<-dnearneigh(xyir,0,0.2)
nbnear2<-dnearneigh(xyir,0,0.3)
nbnear3<-dnearneigh(xyir,0,0.5)
nbnear4<-dnearneigh(xyir,0,1.5)

par(mfrow=c(2,2))
plot(nbnear1,xyir,col="red",pch=20,cex=2)
title(main="neighbors if 0<d<0.2")
plot(nbnear2,xyir,col="red",pch=20,cex=2)
title(main="neighbors if 0<d<0.3")
plot(nbnear3,xyir,col="red",pch=20,cex=2)
title(main="neighbors if 0<d<0.5")
plot(nbnear4,xyir,col="red",pch=20,cex=2)
title(main="neighbors if 0<d<1.5")
@ 
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni7}
\end{center}
<<ni8, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nbnear1
nbnear2
@
Note that some points have no neighbors.
<<ni9, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nbnear3
nbnear4
@
In the last case, all points are connected to the 9 others.

It is also possible to possible to define neighborhood by a criteria based on nearest neighbors. However, note that this option can lead to non-symmetric neighborhood: if site A is the nearest neighbor of site B, it does not mean that site B is the nearest neighbor of site A.

The function knearneigh creates an object of class \texttt{knn}. It can be transform into a \texttt{nb} object with the function \texttt{knn2nb}. Note that this function has a argument \texttt{sym} which can be set to \texttt{TRUE} if we want to force the output neighborhood to symmetry.
<<ni10, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
#?knearneigh
knn1<-knearneigh(xyir,k=1)
nbknn1<- knn2nb(knn1,sym=T)
plot(nbknn1,xyir,col="red",pch=20,cex=2)
title(main="nearest neighbors (k=1)",cex.main=2)
@ 
<<ni11, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
knn2<-knearneigh(xyir,k=2)
nbknn2<- knn2nb(knn2,sym=T)
plot(nbknn2,xyir,col="red",pch=20,cex=2)
title(main="nearest neighbors (k=2)",cex.main=2)
@ 

\begin{center}
\includegraphics[width=0.4\textwidth,keepaspectratio]{figs/tutorial-ni10}
\includegraphics[width=0.4\textwidth,keepaspectratio]{figs/tutorial-ni11}
\end{center}

This definition of neighborhood can lead to unconnected subgraphs. The function \texttt{n.comp.nb} finds the number of disjoint connected subgraphs:
<<ni12, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
n.comp.nb(nbknn1)
n.comp.nb(nbknn2)
@

More elaborate procedures are available to define neighborhood. For instance, Delaunay triangulation is obtained with the function \texttt{tri2nb}. It requires the package \texttt{tripack}. Other procedures are available (Gabriel graph, relative neighborhood...):
<<ni13, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nbtri<-tri2nb(xyir)
nbgab<-graph2nb(gabrielneigh(xyir), sym=TRUE)
nbrel<-graph2nb(relativeneigh(xyir), sym=TRUE)
nbsoi<-graph2nb(soi.graph(nbtri,xyir), sym=TRUE)

par(mfrow=c(2,2))
plot(nbtri,xyir,col="red",pch=20,cex=2)
title(main="Delaunay triangulation")
plot(nbgab,xyir,col="red",pch=20,cex=2)
title(main="Gabriel Graph")
plot(nbrel,xyir,col="red",pch=20,cex=2)
title(main="Relative Neighbor Graph")
plot(nbsoi,xyir,col="red",pch=20,cex=2)
title(main=" Sphere of Influence Graph")
@ 

\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni13}
\end{center}

What are the differences between two neighborhoods ?
<<ni14, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
diffnb(nbsoi,nbrel)
@

Usually, it can be useful to remove some connections due to edge effects. If you want to modify the neighborhood, the function \texttt{edit.nb} provides an interactive tool to add or delete connections.
Lastly, we mention the function include.self to include the site itself in its own list of neighbors:
<<ni15, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
str(nbsoi)
str(include.self(nbsoi))
@
See also these functions for the manipulation of \texttt{nb} objects:
\begin{Sinput}
intersect.nb(nb.obj1,nb.obj2)
union.nb(nb.obj1,nb.obj2)
setdiff.nb(nb.obj1,nb.obj2)
complement.nb(nb.obj)

droplinks(nb, drop, sym=TRUE)

nblag(neighbours, maxlag)
\end{Sinput}
\subsection{Surface data}
If the sampling sites are polygons (and not points), you can use the function \texttt{poly2nb}. Note also that GIS data can be import into R using the package \texttt{shapefiles}. Then, utilities for transform/manipulate these data are available in the package \texttt{maptools}.
<<ni16, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
library(maptools)
data(columbus)
xx <- poly2nb(polys)
plot(polys, border="grey")
plot(xx, coords, add=TRUE,pch=20,cex=2,col="red")
title(main="Neighborhood for polygons")
@ 
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni16}
\end{center}
\section{Spatial weighting matrices}
Spatial weighting matrices are not stored as matrices but as objects of the class \texttt{listw}. This format is more efficient than a matrix representation to manage large data sets. You can easily create an object of class \texttt{listw} from an object of class \texttt{nb} with the function \texttt{nb2listw}.
<<ni17, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
#?nb2listw
@
Different objects \texttt{listw} can be obtained from a \texttt{nb} object. The argument \texttt{style} allow to define a transformation of the matrix such as standardization by row sum, by total sum or binary coding... General spatial weights can be introduced by the argument \texttt{glist}. This allows to introduce, for instance, a weighting relative to the distances between the points. For this task, the function \texttt{nbdists} could be very useful as it computes Euclidean distance between neighbor sites defined by an \texttt{nb} object.

A \texttt{nb} object is a list of neighbors. The neighbors of the first site:
<<ni18, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nbgab[[1]]
@
We can compute Euclidean distance between sites and select distances for neighbors:
<<ni19, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
round(dist(xyir),3)
@
It is done automatically by the function \texttt{nbdists}:
<<ni20, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
distgab<-nbdists(nbgab,xyir)
str(distgab)
@
Then, we can define weights as a function of distance (e.g. $1-d_{ij}/max(d_{ij})$):
<<ni21, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
fdist<-lapply(distgab,function(x) 1-x/max(dist(xyir)))
@
And the spatial weighting matrix can be created:
<<ni22, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
listwgab<-nb2listw(nbgab,glist=fdist,style="B")
listwgab
names(listwgab)
listwgab$neighbours[[1]]
listwgab$weights[[1]]
@
You can obtain the matrix representation of a \texttt{listw} object:
<<ni23, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
print(listw2mat(listwgab),digits=3)
@
\section{Moran's eigenvector maps (MEM)}
Moran's eigenvectors of a spatial weighting matrix are computed by the function \texttt{scores.listw} of the \texttt{spacemakeR} package.
The function returns a list with eigenvalues and eigenvectors:
<<ni24, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
library(spacemakeR)
eigengab=scores.listw(listwgab, echo=TRUE)
barplot(eigengab$values,main="Eigenvalues of spatial weighting matrix")

@ 
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni24}
\end{center}
Eigenvectors can be represented in the geographical space:
<<ni25, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
par(mfrow=c(3,3))
for(i in 1:dim(eigengab$vectors)[2])
s.value(xyir,eigengab$vectors[,i],addaxes=F, sub=paste("Eigenvector",i,"(",round(eigengab$values[i],3),")") ,cleg=0,csub=2,neig=neig(list=nbgab))
@ 
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni25}
\end{center}

Moran's I can be computed and tested for each eigenvector with the \texttt{test.scores} function:
<<ni25b, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
moranI<-test.scores(eigengab,listwgab,99)
moranI
@ 
<<ni25c, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
plot(eigengab$values,moranI$stat,ylab="Moran's I",xlab="Eigenvalues",pch=20,cex=2)
text(eigengab$values,moranI$stat,row.names(moranI),pos=4)
text(-1,0.5,paste("correlation =",cor(moranI$stat,eigengab$values)))
abline(a=0,b=nrow(xyir)/sum(listw2mat(listwgab)),lty=3)
@
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni25c}
\end{center}

Eigenvalues and Moran's I are equal (post-multiply by a constant). Spatial representation of significant eigenvectors:

<<ni26, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
signi=which(moranI$p<0.05)
signi
par(mfrow=n2mfrow(length(signi)))
for(i in signi)
s.value(xyir,eigengab$vectors[,i],addaxes=F,sub=paste("ev",i),csub=2,neig=neig(list=nbgab))
@
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni26}
\end{center}

\section{Selection of a spatial weighting matrix}
The data-driven procedure of selection is based on \textit{AICc}. The function \texttt{ortho.AIC} orders variables and returns \textit{AICc} for all models of one, two, ..., \textit{p}  variables.
We illustrate its use with the oribatid data-set which is available in the \texttt{ade4} package. Data are Hellinger-transformed and then the linear trend is removed:
<<ni27, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
data(oribatid)
fau <-sqrt(oribatid$fau/outer(apply(oribatid$fau,1,sum), rep(1,ncol(oribatid$fau)),"*"))
faudt <- resid(lm(as.matrix(fau)~as.matrix(oribatid$xy)))
@
For instance, we consider the binary spatial weighting matrix based on the Delaunay triangulation.
<<ni28, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
nbtri <- tri2nb(as.matrix(oribatid$xy))
sc.tri <- scores.listw(nb2listw(nbtri,style="B"))
AIC.tri <- ortho.AIC(faudt,sc.tri$vec)
AIC.tri
@

The minimum value and the rank of the corresponding are obtained easily:
<<ni29, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
min(AIC.tri,na.rm=TRUE)
which.min(AIC.tri)
@

Note that the order of the variables can also be obtained from the function \texttt{ortho.AIC} by setting the \texttt{ord.var} argument to \texttt{TRUE}. In this case, the returned object is a list of two vectors:
<<ni30, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
AIC.tri <- ortho.AIC(faudt,sc.tri$vec, ord.var=TRUE)
AIC.tri$AICc[1:10]
AIC.tri$ord[1:10]
@
The user-friendly function \texttt{test.W} simplifies the procedure of selection of a spatial weighting matrix. It takes at least two arguments: a response matrix and an object of the class \texttt{nb}.
If only two arguments are considered, the function prints the results for the best model. All the results are stored in the element \texttt{best} of the list. It contains eigenvectors and eigenvalues of the spatial weighting matrix considered and the results of the \textit{AIC}-based procedure.
<<ni31, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
tri.res <- test.W(faudt,nbtri)
names(tri.res)
names(tri.res$best)
@

The function can also be used to estimate the best values of parameters if we consider a function of the distance.
This can be illustrated with the function $f_2=1-(x^\alpha)/dmax^\alpha$ with the connectivity defined by Delaunay triangulation. We considered the sequence of integers between 2 and 10 for $\alpha$.
<<ni32, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
f2 <- function(x,dmax,y) {1-(x^y)/(dmax)^y}
maxi <- max(unlist(nbdists(nbtri,as.matrix(oribatid$xy))))
tri.f2 <- test.W(faudt,nbtri, f=f2,y=2:10,dmax=maxi,xy=as.matrix(oribatid$xy))
@
In this case, the element best contains the results for the best values of the parameter $\alpha$ (i.e. $\alpha$=10).
<<ni33, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
names(tri.f2$best)
@
Lastly, the function \texttt{test.W} can be used to evaluate different definitions of neighborhood. We illustrate this possibility by the definition of a sequence of neighborhood by distance criteria.
Firstly, we choose the range of values to be tested with an empirical multivariate variogram using the function \texttt{variogmultiv}.
The function has been applied to oribatid mites data:
<<ni34, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
mvspec<-variogmultiv(faudt,oribatid$xy,nclass=20)
mvspec
plot(mvspec$d,mvspec$var,ty='b',pch=20,xlab="Distance", ylab="C(distance)")
@
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni34}
\end{center}
We will construct ten neighborhood matrices with a distance criterion varying along the sequence of 10 evenly distributed values between 1.012 and 4 m:
<<ni35, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
dxy <- seq(give.thresh(dist(oribatid$xy)),4,le=10)
nbdnnlist<-lapply(dxy,dnearneigh, x=as.matrix(oribatid$xy),d1=0)
@
Then, the function \texttt{test.W} can be applied to this list of neighborhood matrices:
<<ni36, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
dnn.bin <- lapply(nbdnnlist,test.W,Y=faudt)
@
The object \texttt{dnn.bin} is a list with the results of \texttt{test.W} for each neighborhood matrix:
<<ni37, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
length(dnn.bin)
@
For each neighborhood matrix, we can find the lowest \textit{AICc}:
<<ni38, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
minAIC<-sapply(dnn.bin, function(x) min(x$best$AICc,na.rm=T))
@ 
And select the best spatial weighting matrix corresponding to a distance of \Sexpr{round(dxy[which.min(minAIC)],3)} m:
<<ni38b, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
which.min(minAIC)
dxy[which.min(minAIC)]
@

A similar approach can be used with a spatial weighting function:
<<ni39, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
f2 <- function(x,dmax,y) {1-(x^y)/(dmax)^y}
@
It is a little bit more complicate if some parameters (here dmax) vary with the neighborhood matrix:
<<ni40, fig=F, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
dnn.f2 <- lapply(nbdnnlist,function(x) test.W(x,Y=faudt, f=f2,y=2:10,dmax= max(unlist(nbdists(x,as.matrix(oribatid$xy)))),xy=as.matrix(oribatid$xy)))
minAIC<-sapply(dnn.f2, function(x) min(x$best$AICc,na.rm=T))
min(minAIC)
which.min(minAIC)
dnn.f2[[which.min(minAIC)]]$all
@

Lastly, Eigenvectors of the best spatial weighting matrix can be mapped. They are represented by the order given by the selection procedure.
The vector 3 explains the largest part of the oribatid community, then it is the second and the eighth:
<<ni41, fig=T, eval=TRUE, echo=TRUE, debug=TRUE, results=verbatim, include =FALSE, width=7, height=7>>=
par(mfrow=c(1,3))
s.value(oribatid$xy, dnn.f2[[7]]$best$vectors[,dnn.f2[[7]]$best$ord[1]],cleg=0,sub=paste("vector",dnn.f2[[7]]$best$ord[1]),csub=3)
s.value(oribatid$xy, dnn.f2[[7]]$best$vectors[,dnn.f2[[7]]$best$ord[2]],cleg=0,sub=paste("vector",dnn.f2[[7]]$best$ord[2]),csub=3)
s.value(oribatid$xy, dnn.f2[[7]]$best$vectors[,dnn.f2[[7]]$best$ord[3]],cleg=0,sub=paste("vector",dnn.f2[[7]]$best$ord[3]),csub=3)
@
\begin{center}
\includegraphics[width=0.8\textwidth,keepaspectratio]{figs/tutorial-ni41}
\end{center}
\end{document}

